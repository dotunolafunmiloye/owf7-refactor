<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Scenario 1 Test Plan" enabled="true">
      <stringProp name="TestPlan.comments">This test plan is a simulation of a realistic end user scenario.

The users are set to log in at varying times, starting with a large percentage then tailing off, with a small percentage being new users.

After logged in, the users will perform a certain number of random actions at a somewhat random rate. Each action they could execute has a varying 
percentage determining the chance of it being executed by a random action. The percentage is a attempt to realistically capture the percentage of
an actual user&apos;s actions that would be that test action, so some are a higher percentage than others.

The following actions could be executed by the user for a random action: 1) Add Widget, 2) Switch Dashboard, 3) Open Widget Launcher,
4) Launch Widget, 5) Edit Dashboard, 6) Create Dashboard, 7) Change Theme, 8) Edit Preferences, 9) Open Help</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ConfigTestElement guiclass="SimpleConfigGui" testclass="ConfigTestElement" testname="Instructions" enabled="true">
        <stringProp name="TestPlan.comments">To run these tests:
1. Ensure your security plugin knows about your test users.  There is a users.propeties file under test/load/jmeter for this. If running from a bundle, 
    place it in tomcat&apos;s lib directory (overriding any existing file).
2. Inspect the &apos;Test Variables&apos; node for test parameters; number of users, number of repetitions, etc.
    Pay attention here to where your server is hosted, and where CAS (required) is hosted; these may be the same
3. Examine HTTP Request Defaults for the protocol, hostname, and port of your test server; this gets pre-pended on 
    every HTTP request sent during the tests
4. [Optional] Disable portions of the test by selecting nodes and right-clicking
5. [Optional] For readability, collapse all Thread Groups (User Threads, Admin Threads, etc.) 
6. [Optional] Select the &apos;View Results Tree&apos; or &apos;Aggregate Report&apos; results at the bottom of test
7. Clear previous run results using Run-&gt;Clear All, or the double broom button
8. Execute using menu choice Run-&gt;Start , or the Play button

**To run from the command line and override the properties in Test Variables, see the comment in Test Variables.</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Test Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="threadTimeToFail" elementType="Argument">
            <stringProp name="Argument.name">threadTimeToFail</stringProp>
            <stringProp name="Argument.value">${__P(threadTimeToFail, 1000000)}</stringProp>
            <stringProp name="Argument.desc">The amount of time in milliseconds to put into the duration assertion of each thread. If the thread takes longer, it will fail.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="versionTesting" elementType="Argument">
            <stringProp name="Argument.name">versionTesting</stringProp>
            <stringProp name="Argument.value">${__P(versionTesting, 5.0.0-ALPHA-SPRINT2-v1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hostName" elementType="Argument">
            <stringProp name="Argument.name">hostName</stringProp>
            <stringProp name="Argument.value">${__P(hostName, perfowfapp01.goss.owfgoss.org)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">OWF Perf Server: perfowfapp01.goss.owfgoss.org</stringProp>
          </elementProp>
          <elementProp name="hostPort" elementType="Argument">
            <stringProp name="Argument.name">hostPort</stringProp>
            <stringProp name="Argument.value">${__P(hostPort, 8443)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="casHost" elementType="Argument">
            <stringProp name="Argument.name">casHost</stringProp>
            <stringProp name="Argument.value">${__P(casHost, perfowfapp01.goss.owfgoss.org)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">OWF Perf Server: perfowfapp01.goss.owfgoss.org</stringProp>
          </elementProp>
          <elementProp name="casPort" elementType="Argument">
            <stringProp name="Argument.name">casPort</stringProp>
            <stringProp name="Argument.value">${__P(casPort, 8443)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="debugEnabled" elementType="Argument">
            <stringProp name="Argument.name">debugEnabled</stringProp>
            <stringProp name="Argument.value">${__P(debugEnabled, false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">To override these in the command line use the format -J[variableName]=value.

If they are not set via the command line, they will use their default value which is the second parameter, following the variable name.

Command line example:
jmeter -n -t perf_get_dashboards.jmx -l results.txt -JloopsPerUser=3 -JapproxTimePerRequest=500 -JnumUser=100 -JthreadTimeToFail=1000</stringProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${hostName}</stringProp>
        <stringProp name="HTTPSampler.port">${hostPort}</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list">
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url"></stringProp>
            <stringProp name="Authorization.username">${userName}</stringProp>
            <stringProp name="Authorization.password">password</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
          </elementProp>
        </collectionProp>
      </AuthManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        <stringProp name="CookieManager.policy">rfc2109</stringProp>
      </CookieManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Action Percentages" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="launchWidget%" elementType="Argument">
            <stringProp name="Argument.name">launchWidget%</stringProp>
            <stringProp name="Argument.value">${__P(launchWidget%, 35)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="switchDashboard%" elementType="Argument">
            <stringProp name="Argument.name">switchDashboard%</stringProp>
            <stringProp name="Argument.value">${__P(switchDashboard%, 20)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="addWidget%" elementType="Argument">
            <stringProp name="Argument.name">addWidget%</stringProp>
            <stringProp name="Argument.value">${__P(addWidget%, 15)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="createDashboard%" elementType="Argument">
            <stringProp name="Argument.name">createDashboard%</stringProp>
            <stringProp name="Argument.value">${__P(createDashboard%, 10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="launchMenu%" elementType="Argument">
            <stringProp name="Argument.name">launchMenu%</stringProp>
            <stringProp name="Argument.value">${__P(launchMenu%, 5)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="editDashboard%" elementType="Argument">
            <stringProp name="Argument.name">editDashboard%</stringProp>
            <stringProp name="Argument.value">${__P(editDashboard%, 5)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="openHelp%" elementType="Argument">
            <stringProp name="Argument.name">openHelp%</stringProp>
            <stringProp name="Argument.value">${__P(openHelp%, 5)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="editWidgets%" elementType="Argument">
            <stringProp name="Argument.name">editWidgets%</stringProp>
            <stringProp name="Argument.value">${__P(editWidgets%, 3)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="changeTheme%" elementType="Argument">
            <stringProp name="Argument.name">changeTheme%</stringProp>
            <stringProp name="Argument.value">${__P(changeTheme%, 2)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">These are the percentage change each action a user takes (an execution of the loop) will result in a given action.

For example, if launchWidget% is set to 35, there is a 35% chance that the user will launch a widget for an action.

NOTE: The values of these variables must add up to 100.</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Scenario Variables 500 Users" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="numUsers" elementType="Argument">
            <stringProp name="Argument.name">numUsers</stringProp>
            <stringProp name="Argument.value">${__P(numUsers, 500)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loopsPerUser" elementType="Argument">
            <stringProp name="Argument.name">loopsPerUser</stringProp>
            <stringProp name="Argument.value">${__P(loopsPerUser, 100)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="newUsers%" elementType="Argument">
            <stringProp name="Argument.name">newUsers%</stringProp>
            <stringProp name="Argument.value">${__P(newUsers%, 10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Percentage of users to be log in as new users.</stringProp>
          </elementProp>
          <elementProp name="initialLoginUsers%" elementType="Argument">
            <stringProp name="Argument.name">initialLoginUsers%</stringProp>
            <stringProp name="Argument.value">${__P(initialLoginUsers%, 40)}</stringProp>
            <stringProp name="Argument.desc">Precentage of users to log in during the initalLoginLength.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="initialLoginTime" elementType="Argument">
            <stringProp name="Argument.name">initialLoginTime</stringProp>
            <stringProp name="Argument.value">${__P(initialLoginTime, 900000)}</stringProp>
            <stringProp name="Argument.desc">How long initial login should last in milliseconds.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="totalLoginTime" elementType="Argument">
            <stringProp name="Argument.name">totalLoginTime</stringProp>
            <stringProp name="Argument.value">${__P(totalLoginTime, 3600000)}</stringProp>
            <stringProp name="Argument.desc">Time all users should be logged in by in milliseconds.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="minDelayBetweenActions" elementType="Argument">
            <stringProp name="Argument.name">minDelayBetweenActions</stringProp>
            <stringProp name="Argument.value">${__P(minDelayBetweenActions, 5000)}</stringProp>
            <stringProp name="Argument.desc">Minimum delay between user actions in the loop.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="maxDelayBetweenActions" elementType="Argument">
            <stringProp name="Argument.name">maxDelayBetweenActions</stringProp>
            <stringProp name="Argument.value">${__P(maxDelayBetweenActions, 60000)}</stringProp>
            <stringProp name="Argument.desc">Maximum delay between user actions in the loop.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">These scenarios are set for a test with 500 users lasting approximately 2-3 hours with a 
15 minute initial login a 1 hour total login.</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Scenario Variables 450 Users" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="numUsers" elementType="Argument">
            <stringProp name="Argument.name">numUsers</stringProp>
            <stringProp name="Argument.value">${__P(numUsers, 450)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loopsPerUser" elementType="Argument">
            <stringProp name="Argument.name">loopsPerUser</stringProp>
            <stringProp name="Argument.value">${__P(loopsPerUser, 100)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="newUsers%" elementType="Argument">
            <stringProp name="Argument.name">newUsers%</stringProp>
            <stringProp name="Argument.value">${__P(newUsers%, 10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Percentage of users to be log in as new users.</stringProp>
          </elementProp>
          <elementProp name="initialLoginUsers%" elementType="Argument">
            <stringProp name="Argument.name">initialLoginUsers%</stringProp>
            <stringProp name="Argument.value">${__P(initialLoginUsers%, 40)}</stringProp>
            <stringProp name="Argument.desc">Precentage of users to log in during the initalLoginLength.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="initialLoginTime" elementType="Argument">
            <stringProp name="Argument.name">initialLoginTime</stringProp>
            <stringProp name="Argument.value">${__P(initialLoginTime, 900000)}</stringProp>
            <stringProp name="Argument.desc">How long initial login should last in milliseconds.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="totalLoginTime" elementType="Argument">
            <stringProp name="Argument.name">totalLoginTime</stringProp>
            <stringProp name="Argument.value">${__P(totalLoginTime, 3600000)}</stringProp>
            <stringProp name="Argument.desc">Time all users should be logged in by in milliseconds.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="minDelayBetweenActions" elementType="Argument">
            <stringProp name="Argument.name">minDelayBetweenActions</stringProp>
            <stringProp name="Argument.value">${__P(minDelayBetweenActions, 5000)}</stringProp>
            <stringProp name="Argument.desc">Minimum delay between user actions in the loop.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="maxDelayBetweenActions" elementType="Argument">
            <stringProp name="Argument.name">maxDelayBetweenActions</stringProp>
            <stringProp name="Argument.value">${__P(maxDelayBetweenActions, 60000)}</stringProp>
            <stringProp name="Argument.desc">Maximum delay between user actions in the loop.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">These scenarios are set for a test with 450 users lasting approximately 2-3 hours with a 
15 minute initial login a 1 hour total login.</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Scenario Variables 400 Users" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="numUsers" elementType="Argument">
            <stringProp name="Argument.name">numUsers</stringProp>
            <stringProp name="Argument.value">${__P(numUsers, 400)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loopsPerUser" elementType="Argument">
            <stringProp name="Argument.name">loopsPerUser</stringProp>
            <stringProp name="Argument.value">${__P(loopsPerUser, 100)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="newUsers%" elementType="Argument">
            <stringProp name="Argument.name">newUsers%</stringProp>
            <stringProp name="Argument.value">${__P(newUsers%, 10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Percentage of users to be log in as new users.</stringProp>
          </elementProp>
          <elementProp name="initialLoginUsers%" elementType="Argument">
            <stringProp name="Argument.name">initialLoginUsers%</stringProp>
            <stringProp name="Argument.value">${__P(initialLoginUsers%, 40)}</stringProp>
            <stringProp name="Argument.desc">Precentage of users to log in during the initalLoginLength.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="initialLoginTime" elementType="Argument">
            <stringProp name="Argument.name">initialLoginTime</stringProp>
            <stringProp name="Argument.value">${__P(initialLoginTime, 900000)}</stringProp>
            <stringProp name="Argument.desc">How long initial login should last in milliseconds.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="totalLoginTime" elementType="Argument">
            <stringProp name="Argument.name">totalLoginTime</stringProp>
            <stringProp name="Argument.value">${__P(totalLoginTime, 3600000)}</stringProp>
            <stringProp name="Argument.desc">Time all users should be logged in by in milliseconds.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="minDelayBetweenActions" elementType="Argument">
            <stringProp name="Argument.name">minDelayBetweenActions</stringProp>
            <stringProp name="Argument.value">${__P(minDelayBetweenActions, 5000)}</stringProp>
            <stringProp name="Argument.desc">Minimum delay between user actions in the loop.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="maxDelayBetweenActions" elementType="Argument">
            <stringProp name="Argument.name">maxDelayBetweenActions</stringProp>
            <stringProp name="Argument.value">${__P(maxDelayBetweenActions, 60000)}</stringProp>
            <stringProp name="Argument.desc">Maximum delay between user actions in the loop.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">These scenarios are set for a test with 400 users lasting approximately 2-3 hours with a 
15 minute initial login a 1 hour total login.</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Scenario Variables 375 Users" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="numUsers" elementType="Argument">
            <stringProp name="Argument.name">numUsers</stringProp>
            <stringProp name="Argument.value">${__P(numUsers, 375)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loopsPerUser" elementType="Argument">
            <stringProp name="Argument.name">loopsPerUser</stringProp>
            <stringProp name="Argument.value">${__P(loopsPerUser, 100)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="newUsers%" elementType="Argument">
            <stringProp name="Argument.name">newUsers%</stringProp>
            <stringProp name="Argument.value">${__P(newUsers%, 10)}</stringProp>
            <stringProp name="Argument.desc">Percentage of users to be log in as new users.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="initialLoginUsers%" elementType="Argument">
            <stringProp name="Argument.name">initialLoginUsers%</stringProp>
            <stringProp name="Argument.value">${__P(initialLoginUsers%, 40)}</stringProp>
            <stringProp name="Argument.desc">Precentage of users to log in during the initalLoginLength.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="initialLoginTime" elementType="Argument">
            <stringProp name="Argument.name">initialLoginTime</stringProp>
            <stringProp name="Argument.value">${__P(initialLoginTime, 900000)}</stringProp>
            <stringProp name="Argument.desc">How long initial login should last in milliseconds.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="totalLoginTime" elementType="Argument">
            <stringProp name="Argument.name">totalLoginTime</stringProp>
            <stringProp name="Argument.value">${__P(totalLoginTime, 3600000)}</stringProp>
            <stringProp name="Argument.desc">Time all users should be logged in by in milliseconds.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="minDelayBetweenActions" elementType="Argument">
            <stringProp name="Argument.name">minDelayBetweenActions</stringProp>
            <stringProp name="Argument.value">${__P(minDelayBetweenActions, 5000)}</stringProp>
            <stringProp name="Argument.desc">Minimum delay between user actions in the loop.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="maxDelayBetweenActions" elementType="Argument">
            <stringProp name="Argument.name">maxDelayBetweenActions</stringProp>
            <stringProp name="Argument.value">${__P(maxDelayBetweenActions, 60000)}</stringProp>
            <stringProp name="Argument.desc">Maximum delay between user actions in the loop.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">These scenarios are set for a test with 375 users lasting approximately 2-3 hours with a 
15 minute initial login a 1 hour total login.</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Scenario Variables 250 Users" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="numUsers" elementType="Argument">
            <stringProp name="Argument.name">numUsers</stringProp>
            <stringProp name="Argument.value">${__P(numUsers, 250)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loopsPerUser" elementType="Argument">
            <stringProp name="Argument.name">loopsPerUser</stringProp>
            <stringProp name="Argument.value">${__P(loopsPerUser, 50)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="newUsers%" elementType="Argument">
            <stringProp name="Argument.name">newUsers%</stringProp>
            <stringProp name="Argument.value">${__P(newUsers%, 10)}</stringProp>
            <stringProp name="Argument.desc">Percentage of users to be log in as new users.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="initialLoginUsers%" elementType="Argument">
            <stringProp name="Argument.name">initialLoginUsers%</stringProp>
            <stringProp name="Argument.value">${__P(initialLoginUsers%, 0)}</stringProp>
            <stringProp name="Argument.desc">Precentage of users to log in during the initalLoginLength.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="initialLoginTime" elementType="Argument">
            <stringProp name="Argument.name">initialLoginTime</stringProp>
            <stringProp name="Argument.value">${__P(initialLoginTime, 0)}</stringProp>
            <stringProp name="Argument.desc">How long initial login should last in milliseconds.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="totalLoginTime" elementType="Argument">
            <stringProp name="Argument.name">totalLoginTime</stringProp>
            <stringProp name="Argument.value">${__P(totalLoginTime, 1800000)}</stringProp>
            <stringProp name="Argument.desc">Time all users should be logged in by in milliseconds.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="minDelayBetweenActions" elementType="Argument">
            <stringProp name="Argument.name">minDelayBetweenActions</stringProp>
            <stringProp name="Argument.value">${__P(minDelayBetweenActions, 5000)}</stringProp>
            <stringProp name="Argument.desc">Minimum delay between user actions in the loop.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="maxDelayBetweenActions" elementType="Argument">
            <stringProp name="Argument.name">maxDelayBetweenActions</stringProp>
            <stringProp name="Argument.value">${__P(maxDelayBetweenActions, 60000)}</stringProp>
            <stringProp name="Argument.desc">Maximum delay between user actions in the loop.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">These scenarios are set for a test with 250 users lasting approximately 1 hour with a 
30 minute total login.</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Scenario Variables 100 Users" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="numUsers" elementType="Argument">
            <stringProp name="Argument.name">numUsers</stringProp>
            <stringProp name="Argument.value">${__P(numUsers, 100)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loopsPerUser" elementType="Argument">
            <stringProp name="Argument.name">loopsPerUser</stringProp>
            <stringProp name="Argument.value">${__P(loopsPerUser, 50)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="newUsers%" elementType="Argument">
            <stringProp name="Argument.name">newUsers%</stringProp>
            <stringProp name="Argument.value">${__P(newUsers%, 10)}</stringProp>
            <stringProp name="Argument.desc">Percentage of users to be log in as new users.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="initialLoginUsers%" elementType="Argument">
            <stringProp name="Argument.name">initialLoginUsers%</stringProp>
            <stringProp name="Argument.value">${__P(initialLoginUsers%, 40)}</stringProp>
            <stringProp name="Argument.desc">Precentage of users to log in during the initalLoginLength.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="initialLoginTime" elementType="Argument">
            <stringProp name="Argument.name">initialLoginTime</stringProp>
            <stringProp name="Argument.value">${__P(initialLoginTime, 300000)}</stringProp>
            <stringProp name="Argument.desc">How long initial login should last in milliseconds.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="totalLoginTime" elementType="Argument">
            <stringProp name="Argument.name">totalLoginTime</stringProp>
            <stringProp name="Argument.value">${__P(totalLoginTime, 900000)}</stringProp>
            <stringProp name="Argument.desc">Time all users should be logged in by in milliseconds.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="minDelayBetweenActions" elementType="Argument">
            <stringProp name="Argument.name">minDelayBetweenActions</stringProp>
            <stringProp name="Argument.value">${__P(minDelayBetweenActions, 5000)}</stringProp>
            <stringProp name="Argument.desc">Minimum delay between user actions in the loop.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="maxDelayBetweenActions" elementType="Argument">
            <stringProp name="Argument.name">maxDelayBetweenActions</stringProp>
            <stringProp name="Argument.value">${__P(maxDelayBetweenActions, 30000)}</stringProp>
            <stringProp name="Argument.desc">Maximum delay between user actions in the loop.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">These scenarios are set for a test with 100 users lasting approximately 45 minutes with a 
5 minute initial login and 15 hour total login.</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Test Scenario Variables" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="numUsers" elementType="Argument">
            <stringProp name="Argument.name">numUsers</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loopsPerUser" elementType="Argument">
            <stringProp name="Argument.name">loopsPerUser</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="newUsers%" elementType="Argument">
            <stringProp name="Argument.name">newUsers%</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Percentage of users to be logged in prior to the test beginning.</stringProp>
          </elementProp>
          <elementProp name="initialLoginUsers%" elementType="Argument">
            <stringProp name="Argument.name">initialLoginUsers%</stringProp>
            <stringProp name="Argument.value">40</stringProp>
            <stringProp name="Argument.desc">Precentage of users to log in during the initalLoginLength.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="initialLoginTime" elementType="Argument">
            <stringProp name="Argument.name">initialLoginTime</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">How long initial login should last in milliseconds.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="totalLoginTime" elementType="Argument">
            <stringProp name="Argument.name">totalLoginTime</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.desc">Time all users should be logged in by in milliseconds.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="minDelayBetweenActions" elementType="Argument">
            <stringProp name="Argument.name">minDelayBetweenActions</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.desc">Minimum delay between user actions in the loop.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="maxDelayBetweenActions" elementType="Argument">
            <stringProp name="Argument.name">maxDelayBetweenActions</stringProp>
            <stringProp name="Argument.value">2000</stringProp>
            <stringProp name="Argument.desc">Maximum delay between user actions in the loop.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Test Action Percentages" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="launchWidget%" elementType="Argument">
            <stringProp name="Argument.name">launchWidget%</stringProp>
            <stringProp name="Argument.value">12</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="switchDashboard%" elementType="Argument">
            <stringProp name="Argument.name">switchDashboard%</stringProp>
            <stringProp name="Argument.value">11</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="addWidget%" elementType="Argument">
            <stringProp name="Argument.name">addWidget%</stringProp>
            <stringProp name="Argument.value">11</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="createDashboard%" elementType="Argument">
            <stringProp name="Argument.name">createDashboard%</stringProp>
            <stringProp name="Argument.value">11</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="launchMenu%" elementType="Argument">
            <stringProp name="Argument.name">launchMenu%</stringProp>
            <stringProp name="Argument.value">11</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="editDashboard%" elementType="Argument">
            <stringProp name="Argument.name">editDashboard%</stringProp>
            <stringProp name="Argument.value">11</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="openHelp%" elementType="Argument">
            <stringProp name="Argument.name">openHelp%</stringProp>
            <stringProp name="Argument.value">11</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="editWidgets%" elementType="Argument">
            <stringProp name="Argument.name">editWidgets%</stringProp>
            <stringProp name="Argument.value">11</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="changeTheme%" elementType="Argument">
            <stringProp name="Argument.name">changeTheme%</stringProp>
            <stringProp name="Argument.value">11</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">These are the percentage change each action a user takes (an execution of the loop) will result in a given action.

For example, if launchWidget% is set to 35, there is a 35% chance that the user will launch a widget for an action.

NOTE: The values of these variables must add up to 100.</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Flag Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="realisticLoginEnabled" elementType="Argument">
            <stringProp name="Argument.name">realisticLoginEnabled</stringProp>
            <stringProp name="Argument.value">${__P(realisticLoginEnabled, true)}</stringProp>
            <stringProp name="Argument.desc">Whether users will log in during the test, or all log in then start the test.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="initialLoginEnabled" elementType="Argument">
            <stringProp name="Argument.name">initialLoginEnabled</stringProp>
            <stringProp name="Argument.value">${__P(initialLoginEnabled, false)}</stringProp>
            <stringProp name="Argument.desc">Whether there will be an initial login time or not.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">These variables control how the test runs.</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="CAS Login Variables" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="firstDelay" elementType="Argument">
            <stringProp name="Argument.name">firstDelay</stringProp>
            <stringProp name="Argument.value">400</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">How long to delay the first group of users logging in. (ms)</stringProp>
          </elementProp>
          <elementProp name="secondDelay" elementType="Argument">
            <stringProp name="Argument.name">secondDelay</stringProp>
            <stringProp name="Argument.value">800</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">How long to delay the second group of users logging in. (ms)</stringProp>
          </elementProp>
          <elementProp name="thirdDelay" elementType="Argument">
            <stringProp name="Argument.name">thirdDelay</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">How long to delay the third group of users logging in. (ms)</stringProp>
          </elementProp>
          <elementProp name="fourthDelay" elementType="Argument">
            <stringProp name="Argument.name">fourthDelay</stringProp>
            <stringProp name="Argument.value">5000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">How long to delay the fourth group of users logging in. (ms)</stringProp>
          </elementProp>
          <elementProp name="firstMax" elementType="Argument">
            <stringProp name="Argument.name">firstMax</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.desc">Max thread number to include in the first group.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="secondMax" elementType="Argument">
            <stringProp name="Argument.name">secondMax</stringProp>
            <stringProp name="Argument.value">225</stringProp>
            <stringProp name="Argument.desc">Max thread number to include in the first group (total threads in second = secondMax - firstMax)..</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="thirdMax" elementType="Argument">
            <stringProp name="Argument.name">thirdMax</stringProp>
            <stringProp name="Argument.value">350</stringProp>
            <stringProp name="Argument.desc">Max thread number to include in the first group (total threads in third = thirdMax - secondMax)..</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="HTTP-Basic Login Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="firstDelay" elementType="Argument">
            <stringProp name="Argument.name">firstDelay</stringProp>
            <stringProp name="Argument.value">400</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">How long to delay the first group of users logging in. (ms)</stringProp>
          </elementProp>
          <elementProp name="secondDelay" elementType="Argument">
            <stringProp name="Argument.name">secondDelay</stringProp>
            <stringProp name="Argument.value">900</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">How long to delay the second group of users logging in. (ms)</stringProp>
          </elementProp>
          <elementProp name="thirdDelay" elementType="Argument">
            <stringProp name="Argument.name">thirdDelay</stringProp>
            <stringProp name="Argument.value">1200</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">How long to delay the third group of users logging in. (ms)</stringProp>
          </elementProp>
          <elementProp name="fourthDelay" elementType="Argument">
            <stringProp name="Argument.name">fourthDelay</stringProp>
            <stringProp name="Argument.value">1500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">How long to delay the fourth group of users logging in. (ms)</stringProp>
          </elementProp>
          <elementProp name="firstMax" elementType="Argument">
            <stringProp name="Argument.name">firstMax</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.desc">Max thread number to include in the first group.</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="secondMax" elementType="Argument">
            <stringProp name="Argument.name">secondMax</stringProp>
            <stringProp name="Argument.value">200</stringProp>
            <stringProp name="Argument.desc">Max thread number to include in the first group (total threads in second = secondMax - firstMax)..</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="thirdMax" elementType="Argument">
            <stringProp name="Argument.name">thirdMax</stringProp>
            <stringProp name="Argument.value">350</stringProp>
            <stringProp name="Argument.desc">Max thread number to include in the first group (total threads in third = thirdMax - secondMax)..</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Metric Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="metric-guid" elementType="Argument">
            <stringProp name="Argument.name">metric-guid</stringProp>
            <stringProp name="Argument.value">b3b1d04f-97c2-4726-9575-82bb1cf1af6a</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Metric guid to use for send metric request.</stringProp>
          </elementProp>
          <elementProp name="metric-id" elementType="Argument">
            <stringProp name="Argument.name">metric-id</stringProp>
            <stringProp name="Argument.value">6f70bb25-16a6-c6e3-b961-3d213c4fe667</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Instance id to use for send metric request.</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Dynamic Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="existingUsers" elementType="Argument">
            <stringProp name="Argument.name">existingUsers</stringProp>
            <stringProp name="Argument.value">${__javaScript(parseInt(vars.get(&quot;numUsers&quot;) * ((1/100) * (100 - parseInt(vars.get(&quot;newUsers%&quot;))))))}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="initialLoginUsers%Float" elementType="Argument">
            <stringProp name="Argument.name">initialLoginUsers%Float</stringProp>
            <stringProp name="Argument.value">${__javaScript(parseInt(vars.get(&quot;initialLoginUsers%&quot;)).toFixed(1))}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="remainingLoginUsers%Float" elementType="Argument">
            <stringProp name="Argument.name">remainingLoginUsers%Float</stringProp>
            <stringProp name="Argument.value">${__javaScript((100 - parseInt(vars.get(&quot;initialLoginUsers%&quot;))).toFixed(1))}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">This variables must follow all other User Defined Variables objects because they calculate a dynamic value based on other variables.</stringProp>
      </Arguments>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Write Out Variables to Report" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1337607522000</longProp>
        <longProp name="ThreadGroup.end_time">1337607522000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Writes out a single transaction to the aggregate report generated at the end of the test in order for the details to be easily accessible without
having to open up the test in JMeter.</stringProp>
      </SetupThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Generate Report Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="newUsers" elementType="Argument">
              <stringProp name="Argument.name">newUsers</stringProp>
              <stringProp name="Argument.value">${__javaScript(parseInt(vars.get(&quot;numUsers&quot;)) * ((1/100) * parseInt(vars.get(&quot;newUsers%&quot;))))}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="initialLoginTimeMinutes" elementType="Argument">
              <stringProp name="Argument.name">initialLoginTimeMinutes</stringProp>
              <stringProp name="Argument.value">${__jexl2((${initialLoginTime} / 1000) / 60)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="initialLoginUsers" elementType="Argument">
              <stringProp name="Argument.name">initialLoginUsers</stringProp>
              <stringProp name="Argument.value">${__javaScript(parseInt(vars.get(&quot;numUsers&quot;)) * ((1/100) * parseInt(vars.get(&quot;initialLoginUsers%&quot;))))}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="remainingLoginTimeMinutes" elementType="Argument">
              <stringProp name="Argument.name">remainingLoginTimeMinutes</stringProp>
              <stringProp name="Argument.value">${__jexl2(((${totalLoginTime} - ${initialLoginTime}) / 1000) / 60)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="remainingLoginUsers" elementType="Argument">
              <stringProp name="Argument.name">remainingLoginUsers</stringProp>
              <stringProp name="Argument.value">${__javaScript(parseInt(vars.get(&quot;numUsers&quot;)) - (parseInt(vars.get(&quot;numUsers&quot;)) * ((1/100) * parseInt(vars.get(&quot;initialLoginUsers%&quot;)))))}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="totalLoginTimeMinutes" elementType="Argument">
              <stringProp name="Argument.name">totalLoginTimeMinutes</stringProp>
              <stringProp name="Argument.value">${__jexl2((${totalLoginTime} / 1000) / 60)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Generate Dynamic Report Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="initialLoginSpeed" elementType="Argument">
              <stringProp name="Argument.name">initialLoginSpeed</stringProp>
              <stringProp name="Argument.value">${__javaScript((parseInt(vars.get(&quot;initialLoginTimeMinutes&quot;)) * 60) / parseInt(vars.get(&quot;initialLoginUsers&quot;)))}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="remainingLoginSpeed" elementType="Argument">
              <stringProp name="Argument.name">remainingLoginSpeed</stringProp>
              <stringProp name="Argument.value">${__javaScript((parseInt(vars.get(&quot;remainingLoginTimeMinutes&quot;)) * 60) / parseInt(vars.get(&quot;remainingLoginUsers&quot;)))}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="totalLoginSpeed" elementType="Argument">
              <stringProp name="Argument.name">totalLoginSpeed</stringProp>
              <stringProp name="Argument.value">${__javaScript((parseInt(vars.get(&quot;totalLoginTimeMinutes&quot;)) * 60) / parseInt(vars.get(&quot;numUsers&quot;)))}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
          <stringProp name="TestPlan.comments">Required to make sure the transactions execute.</stringProp>
        </TestAction>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Users = ${numUsers}" enabled="true">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Actions = ${loopsPerUser}" enabled="true">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="New Users = ${newUsers}" enabled="true">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Min Delay Between Actions = ${minDelayBetweenActions}" enabled="true">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Max Delay Between Actions = ${maxDelayBetweenActions}" enabled="true">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If initialLoginEnabled" enabled="true">
          <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;initialLoginEnabled&quot;) == &quot;true&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Initial Login Time = ${initialLoginTimeMinutes} Minutes" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Initial Login Users = ${initialLoginUsers}" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Initial Login Speed = 1 Login Every ${initialLoginSpeed} Second(s)" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Remaining Login Time = ${remainingLoginTimeMinutes} Minutes" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Remaining Login Users = ${remainingLoginUsers}" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Remaining Login Speed = 1 Login Every ${remainingLoginSpeed} Second(s)" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Not initialLoginEnabled" enabled="true">
          <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;initialLoginEnabled&quot;) == &quot;false&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Total Login Time = ${totalLoginTimeMinutes} Minutes" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Login Speed = 1 Login Every ${remainingLoginSpeed} Second(s)" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Prepare Existing Users" enabled="true">
        <stringProp name="TestPlan.comments">Ramp-Up set to 0 because the Login scripts handle their throughput automatically.</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${numUsers}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1336158732000</longProp>
        <longProp name="ThreadGroup.end_time">1336158732000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If realisticLoginEnabled Prepare Existing Users" enabled="true">
          <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;realisticLoginEnabled&quot;) == &quot;true&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end">${numUsers}</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">userNum</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-266534175">userRole</stringProp>
              <stringProp name="-266464859">userType</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1161577384">
                <stringProp name="2645995">User</stringProp>
                <stringProp name="3556498">test</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
            <stringProp name="TestPlan.comments">Sets parameters specific to a User thread (as opposed to an Admin thread).

Variable Explanations:
1. userRole: Tells the login script what type of usernames to generate. (e.g. testUser1 or testAdmin1)
2. userType: Either test or scenario, test is an existing user, scenario is for new users.</stringProp>
          </UserParameters>
          <hashTree/>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Catch Existing Users Prior To Test" enabled="true">
            <intProp name="ThroughputController.style">0</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <stringProp name="ThroughputController.maxThroughput">${existingUsers}</stringProp>
            <stringProp name="ThroughputController.percentThroughput">${__jexl2(100 - ${newUsers%})}</stringProp>
          </ThroughputController>
          <hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Login Existing Users" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Sequential Login Module" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                  <stringProp name="977251861">Test Fragments</stringProp>
                  <stringProp name="611593987">Sequential Login Script</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree>
                <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
                  <stringProp name="groupSize">${existingUsers}</stringProp>
                </SyncTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Logout Existing Users" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Logout Module" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                  <stringProp name="977251861">Test Fragments</stringProp>
                  <stringProp name="-182467168">Included Fragments and Components</stringProp>
                  <stringProp name="721943694">Include Logout Fragment</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Logout Delay Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${__jexl2(${__threadNum()} * 75)}</stringProp>
              </ConstantTimer>
              <hashTree/>
              <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
                <stringProp name="groupSize">${existingUsers}</stringProp>
              </SyncTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="User Threads" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${numUsers}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1290786324000</longProp>
        <longProp name="ThreadGroup.end_time">1290786324000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Ramp-Up set to 0 because the Login scripts handle their throughput automatically.</stringProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end">${numUsers}</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">userNum</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-266534175">userRole</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="115842275">
              <stringProp name="2645995">User</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
          <stringProp name="TestPlan.comments">Sets parameters specific to a User thread (as opposed to an Admin thread).

Variable Explanations:
1. userRole: Tells the login script what type of usernames to generate. (e.g. testUser1 or testAdmin1)</stringProp>
        </UserParameters>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Not realisticLoginEnabled Do Login" enabled="true">
          <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;realisticLoginEnabled&quot;) == &quot;false&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Set User Type to Existing User" enabled="true">
            <stringProp name="TestPlan.comments">Set all users to type existing user.</stringProp>
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-266464859">userType</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1865434186">
                  <stringProp name="3556498">test</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
          </hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Sequential Login Module" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
              <stringProp name="977251861">Test Fragments</stringProp>
              <stringProp name="611593987">Sequential Login Script</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree>
            <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
              <stringProp name="groupSize">${numUsers}</stringProp>
            </SyncTimer>
            <hashTree/>
          </hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Synchronize and Get Dashboards" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Get Dashboards Module" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                <stringProp name="977251861">Test Fragments</stringProp>
                <stringProp name="-182467168">Included Fragments and Components</stringProp>
                <stringProp name="465044926">Include Get Dashboards Component</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
              <stringProp name="groupSize">${numUsers}</stringProp>
            </SyncTimer>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${__jexl2(${__threadNum()} * 700)}</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If realisticLoginEnabled Assign User Types" enabled="true">
          <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;realisticLoginEnabled&quot;) == &quot;true&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Set User Type to New User" enabled="true">
            <stringProp name="TestPlan.comments">Set the userType variable to scenario, which will be used for new users. The following catch will then change this variable to
test to label the appropriate amount of the initial threads as existing users, so they will log in faster.</stringProp>
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-266464859">userType</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1037310481">
                  <stringProp name="-775588976">scenario</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Catch Existing Users" enabled="true">
            <intProp name="ThroughputController.style">0</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <stringProp name="ThroughputController.maxThroughput">${existingUsers}</stringProp>
            <stringProp name="ThroughputController.percentThroughput">${existingUsers}</stringProp>
          </ThroughputController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Set User Type for Existing Users" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-266464859">userType</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="1865434186">
                    <stringProp name="3556498">test</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Synchronize Users" enabled="true"/>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree/>
          <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
            <stringProp name="groupSize">${numUsers}</stringProp>
          </SyncTimer>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If realisticLoginEnabled Assign Delays" enabled="true">
          <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;realisticLoginEnabled&quot;) == &quot;true&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If initialLoginEnabled Assign Delays" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;initialLoginEnabled&quot;) == &quot;true&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
            <hashTree>
              <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Catch Initial Login Users" enabled="true">
                <intProp name="ThroughputController.style">1</intProp>
                <boolProp name="ThroughputController.perThread">false</boolProp>
                <intProp name="ThroughputController.maxThroughput">1</intProp>
                <stringProp name="ThroughputController.percentThroughput">${__jexl2(${initialLoginUsers%Float})}</stringProp>
              </ThroughputController>
              <hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Short Delays for Initial Login Users" enabled="true">
                  <stringProp name="TestPlan.comments">Uses a Uniform Random Timer to randomly disperse the login of users collected for the initial log in time uniformly during the initial login time
set via the initialLoginTime variable.</stringProp>
                  <intProp name="ActionProcessor.action">1</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration">0</stringProp>
                </TestAction>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="TestPlan.comments">Starts distributing users in the initial login immediately in a random but uniform pattern along the time set via the initialLoginTime variable.</stringProp>
                    <stringProp name="ConstantTimer.delay">0</stringProp>
                    <stringProp name="RandomTimer.range">${__javaScript(parseInt(vars.get(&quot;initialLoginTime&quot;)))}</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Catch All Other Users" enabled="true">
                <intProp name="ThroughputController.style">1</intProp>
                <boolProp name="ThroughputController.perThread">false</boolProp>
                <intProp name="ThroughputController.maxThroughput">1</intProp>
                <stringProp name="ThroughputController.percentThroughput">${__jexl2(${remainingLoginUsers%Float})}</stringProp>
              </ThroughputController>
              <hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Longer Delays for All Other Users" enabled="true">
                  <stringProp name="TestPlan.comments">Uses a Uniform Random Timer to randomly disperse the login of all other users not in the initial login uniformly among the remaining
time set via the totalLoginTime variable.

None of these users will start during the initial login. They will all wait until after it is complete to start logging in.</stringProp>
                  <intProp name="ActionProcessor.action">1</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration">0</stringProp>
                </TestAction>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="TestPlan.comments">Waits to distribute users until after the initial log in time is complete, then starts distributing users in a random but uniform pattern along the 
time remaining in the total login time set via the allUsersTotalLoginTime variable.</stringProp>
                    <stringProp name="ConstantTimer.delay"> ${__javaScript(parseInt(vars.get(&quot;initialLoginTime&quot;)))}</stringProp>
                    <stringProp name="RandomTimer.range">${__javaScript(parseInt(vars.get(&quot;totalLoginTime&quot;)) - parseInt(vars.get(&quot;initialLoginTime&quot;)))}</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Not initialLoginEnabled Assign Delay" enabled="true">
            <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;initialLoginEnabled&quot;) == &quot;false&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Delay All Users Equally" enabled="true">
              <stringProp name="TestPlan.comments">Uses a Uniform Random Timer to randomly disperse the login of all other users.</stringProp>
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="TestPlan.comments">Waits to distribute users until after the initial log in time is complete, then starts distributing users in a random but uniform pattern along the 
time remaining in the total login time set via the allUsersTotalLoginTime variable.</stringProp>
                <stringProp name="ConstantTimer.delay">0</stringProp>
                <stringProp name="RandomTimer.range">${__javaScript(parseInt(vars.get(&quot;totalLoginTime&quot;)))}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="User Test Lifetime Transaction (Requests Only, No Delays)" enabled="true">
          <boolProp name="TransactionController.parent">false</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="User Test Lifetime Transaction (With Delays)" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If realisticLoginEnabled Do Login" enabled="true">
              <stringProp name="IfController.condition">${__javaScript(vars.get(&quot;realisticLoginEnabled&quot;) == &quot;true&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="All Transactions" enabled="true">
                <boolProp name="TransactionController.parent">false</boolProp>
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <stringProp name="TestPlan.comments">Encompasses all transactions in order to deliver a pure average time per request and throughput.</stringProp>
              </TransactionController>
              <hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Login Transaction" enabled="true">
                  <boolProp name="TransactionController.parent">false</boolProp>
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                </TransactionController>
                <hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Login Module" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                      <stringProp name="977251861">Test Fragments</stringProp>
                      <stringProp name="73596745">Login</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Load Requests Module" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                      <stringProp name="977251861">Test Fragments</stringProp>
                      <stringProp name="1899770302">Load Requests</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If New User" enabled="true">
                    <stringProp name="IfController.condition">${dashboardGuid_matchNr} == 0</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Untitled Dashboard" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="_method" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">POST</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">_method</stringProp>
                          </elementProp>
                          <elementProp name="bypassLayoutRearrange" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">bypassLayoutRearrange</stringProp>
                          </elementProp>
                          <elementProp name="dojo.preventCache" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${__Random(1000000000000,9999999999999)}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">dojo.preventCache</stringProp>
                          </elementProp>
                          <elementProp name="guid" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${randomGuid}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">guid</stringProp>
                          </elementProp>
                          <elementProp name="isdefault" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">true</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">isdefault</stringProp>
                          </elementProp>
                          <elementProp name="name" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">Untitled</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">name</stringProp>
                          </elementProp>
                          <elementProp name="version" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">${versionTesting}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">version</stringProp>
                          </elementProp>
                          <elementProp name="layoutConfig" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{&quot;xtype&quot;:&quot;container&quot;,&quot;cls&quot;:&quot;hbox &quot;,&quot;layout&quot;:{&quot;type&quot;:&quot;hbox&quot;,&quot;align&quot;:&quot;stretch&quot;},&quot;items&quot;:[{&quot;xtype&quot;:&quot;dashboarddesignerpane&quot;,&quot;cls&quot;:&quot;left&quot;,&quot;flex&quot;:1,&quot;htmlText&quot;:&quot;50%&quot;,&quot;items&quot;:[],&quot;widgets&quot;:[],&quot;paneType&quot;:&quot;tabbedpane&quot;},{&quot;xtype&quot;:&quot;dashboardsplitter&quot;},{&quot;xtype&quot;:&quot;dashboarddesignerpane&quot;,&quot;cls&quot;:&quot;right&quot;,&quot;flex&quot;:1,&quot;htmlText&quot;:&quot;50%&quot;,&quot;items&quot;:[],&quot;paneType&quot;:&quot;tabbedpane&quot;}],&quot;flex&quot;:3}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">layoutConfig</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain"></stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      <stringProp name="HTTPSampler.protocol"></stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">owf/prefs/dashboard/${randomGuid}</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.implementation">Java</stringProp>
                      <boolProp name="HTTPSampler.monitor">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                        <collectionProp name="UserParameters.names">
                          <stringProp name="115267052">randomGuid</stringProp>
                          <stringProp name="1955539815">dashboardGuid_matchNr</stringProp>
                          <stringProp name="2031598511">dashboardGuid_1</stringProp>
                          <stringProp name="-1856612905">activeDashboardGuid</stringProp>
                        </collectionProp>
                        <collectionProp name="UserParameters.thread_values">
                          <collectionProp name="-2129572947">
                            <stringProp name="831637606">${__RandomString(8,abcdef0123456789,)}-${__RandomString(4,abcdef0123456789,)}-${__RandomString(4,abcdef0123456789,)}-${__RandomString(4,abcdef0123456789,)}-${__RandomString(12,abcdef0123456789,)}</stringProp>
                            <stringProp name="49">1</stringProp>
                            <stringProp name="298010330">${randomGuid}</stringProp>
                            <stringProp name="298010330">${randomGuid}</stringProp>
                          </collectionProp>
                        </collectionProp>
                        <boolProp name="UserParameters.per_iteration">false</boolProp>
                      </UserParameters>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Begin Action Loop" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${loopsPerUser}</stringProp>
            </LoopController>
            <hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Add Delay Between Actions" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">${minDelayBetweenActions}</stringProp>
                  <stringProp name="RandomTimer.range">${__jexl2(${maxDelayBetweenActions} - ${minDelayBetweenActions})}</stringProp>
                </GaussianRandomTimer>
                <hashTree/>
              </hashTree>
              <RandomOrderController guiclass="RandomOrderControllerGui" testclass="RandomOrderController" testname="Randomize Action Order" enabled="true"/>
              <hashTree>
                <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Launch Widget" enabled="true">
                  <intProp name="ThroughputController.style">1</intProp>
                  <boolProp name="ThroughputController.perThread">true</boolProp>
                  <stringProp name="ThroughputController.maxThroughput">${__javaScript(parseInt(parseInt(${loopsPerUser}) * (1/100) * parseInt(${launchWidget%})))}</stringProp>
                  <stringProp name="ThroughputController.percentThroughput">${__javaScript(parseInt(vars.get(&quot;launchWidget%&quot;)))}</stringProp>
                </ThroughputController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="All Transactions" enabled="true">
                    <boolProp name="TransactionController.parent">false</boolProp>
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <stringProp name="TestPlan.comments">Encompasses all transactions in order to deliver a pure average time per request and throughput.</stringProp>
                  </TransactionController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Launch Widget Transaction - ${launchWidget%}%" enabled="true">
                      <boolProp name="TransactionController.parent">false</boolProp>
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                    </TransactionController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include List Widgets Module" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                          <stringProp name="977251861">Test Fragments</stringProp>
                          <stringProp name="-182467168">Included Fragments and Components</stringProp>
                          <stringProp name="1758189634">Include List Widgets Component</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                      <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Add Delay for Selecting a Widget to Launch" enabled="true">
                        <intProp name="ActionProcessor.action">1</intProp>
                        <intProp name="ActionProcessor.target">0</intProp>
                        <stringProp name="ActionProcessor.duration">0</stringProp>
                      </TestAction>
                      <hashTree>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="ConstantTimer.delay">1000</stringProp>
                          <stringProp name="RandomTimer.range">10000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                      <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Set Up Parameters for Widget Preferences Save" enabled="true">
                        <intProp name="ActionProcessor.action">1</intProp>
                        <intProp name="ActionProcessor.target">0</intProp>
                        <stringProp name="ActionProcessor.duration">0</stringProp>
                      </TestAction>
                      <hashTree>
                        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                          <collectionProp name="UserParameters.names">
                            <stringProp name="-827553833">randomTag</stringProp>
                          </collectionProp>
                          <collectionProp name="UserParameters.thread_values">
                            <collectionProp name="-28989564">
                              <stringProp name="117642219">${__RandomString(${__Random(1,5)},1234567890abcdefghijklmnopqrstuvwxyz)}</stringProp>
                            </collectionProp>
                          </collectionProp>
                          <boolProp name="UserParameters.per_iteration">false</boolProp>
                        </UserParameters>
                        <hashTree/>
                        <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor To Update All Widgets" enabled="false">
                          <stringProp name="scriptLanguage">javascript</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">var widgetsToUpdate = vars.get(&apos;widgetsToUpdate&apos;);
var counter = vars.get(&apos;counter&apos;);

if(counter == 1) {
    widgetsToUpdate = &apos;[&apos;;
} else {
    widgetsToUpdate += &apos;,&apos;;
}

//Get a random boolean
function getRandomBoolean() {
    if(Math.round(Math.random()) === 0) {
        return false;
    } else {
        return true;
    }
}

var widgetGuid = vars.get(&apos;widgetGuid_&apos; + counter);

//Random whether it gets a tag or not
if(getRandomBoolean()) {
    widgetsToUpdate += &apos;{&quot;guid&quot;:&quot;&apos; + widgetGuid + &apos;&quot;, &quot;visible&quot;:&apos; + getRandomBoolean().toString() + &apos;,&quot;tags&quot;:[{&quot;name&quot;:&quot;&apos; + vars.get(&apos;randomTag&apos;) + &apos;&quot;,&quot;visible&quot;:true,&quot;position&quot;:-1,&quot;editable&quot;:true}]}&apos;;
} else {
    widgetsToUpdate += &apos;{&quot;guid&quot;:&quot;&apos; + widgetGuid + &apos;&quot;, &quot;visible&quot;:&apos; + getRandomBoolean() + &apos;,&quot;tags&quot;:[]}&apos;;
}

//Last widget guid, close the string
if(counter == vars.get(&apos;widgetGuid_matchNr&apos;)) {
    widgetsToUpdate += &apos;]&apos;;
}

vars.put(&apos;widgetsToUpdate&apos;, widgetsToUpdate);</stringProp>
                        </BSFPreProcessor>
                        <hashTree/>
                        <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor To Update One Widget" enabled="true">
                          <stringProp name="scriptLanguage">javascript</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">var widgetsToUpdate = vars.get(&apos;widgetsToUpdate&apos;);

widgetsToUpdate = &apos;[&apos;;

//Get a random boolean
function getRandomBoolean() {
    if(Math.round(Math.random()) === 0) {
        return false;
    } else {
        return true;
    }
}

//Select a random widget guid
var widgetGuid = vars.get(&apos;widgetGuid_&apos; + Math.floor(Math.random()*parseInt(vars.get(&apos;widgetGuid_matchNr&apos;)) + 1));

//Random whether it gets a tag or not
/*
if(getRandomBoolean()) {
    widgetsToUpdate += &apos;{&quot;guid&quot;:&quot;&apos; + widgetGuid + &apos;&quot;, &quot;visible&quot;:&apos; + getRandomBoolean().toString() + &apos;,&quot;tags&quot;:[{&quot;name&quot;:&quot;&apos; + vars.get(&apos;randomTag&apos;) + &apos;&quot;,&quot;visible&quot;:true,&quot;position&quot;:-1,&quot;editable&quot;:true}]}&apos;;
} else {
    widgetsToUpdate += &apos;{&quot;guid&quot;:&quot;&apos; + widgetGuid + &apos;&quot;, &quot;visible&quot;:&apos; + getRandomBoolean() + &apos;,&quot;tags&quot;:[]}&apos;;
}
*/

widgetsToUpdate += &apos;{&quot;guid&quot;:&quot;&apos; + widgetGuid + &apos;&quot;}&apos;;

widgetsToUpdate += &apos;]&apos;;

vars.put(&apos;widgetsToUpdate&apos;, widgetsToUpdate);</stringProp>
                        </BSFPreProcessor>
                        <hashTree/>
                      </hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Update Widget Preferences Module" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                          <stringProp name="977251861">Test Fragments</stringProp>
                          <stringProp name="-182467168">Included Fragments and Components</stringProp>
                          <stringProp name="-1363958504">Include Update Widget Preferences Component</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Send Metric Module" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                          <stringProp name="977251861">Test Fragments</stringProp>
                          <stringProp name="-182467168">Included Fragments and Components</stringProp>
                          <stringProp name="524233325">Include Send Metric Component</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Send Widget Load Time Module" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                          <stringProp name="977251861">Test Fragments</stringProp>
                          <stringProp name="-182467168">Included Fragments and Components</stringProp>
                          <stringProp name="291492328">Include Send Widget Load Time Component</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Switch Dashboard" enabled="true">
                  <intProp name="ThroughputController.style">1</intProp>
                  <boolProp name="ThroughputController.perThread">true</boolProp>
                  <stringProp name="ThroughputController.maxThroughput">${__javaScript(parseInt(parseInt(${loopsPerUser}) * (1/100) * parseInt(${switchDashboards%})))}</stringProp>
                  <stringProp name="ThroughputController.percentThroughput">${__javaScript(parseInt(vars.get(&quot;switchDashboard%&quot;)))}</stringProp>
                </ThroughputController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="All Transactions" enabled="true">
                    <boolProp name="TransactionController.parent">false</boolProp>
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <stringProp name="TestPlan.comments">Encompasses all transactions in order to deliver a pure average time per request and throughput.</stringProp>
                  </TransactionController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Switch Dashboard Transaction - ${switchDashboard%}%" enabled="true">
                      <boolProp name="TransactionController.parent">false</boolProp>
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                    </TransactionController>
                    <hashTree>
                      <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Set Up Parameters for Switch Dashboards" enabled="true">
                        <intProp name="ActionProcessor.action">1</intProp>
                        <intProp name="ActionProcessor.target">0</intProp>
                        <stringProp name="ActionProcessor.duration">0</stringProp>
                        <stringProp name="TestPlan.comments">Sets the tempActiveDashboardGuid and generates a random activeWidgetCount to be used by the Open Widgets Fragment.</stringProp>
                      </TestAction>
                      <hashTree>
                        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                          <collectionProp name="UserParameters.names">
                            <stringProp name="1093960035">tempActiveDashboardGuid</stringProp>
                          </collectionProp>
                          <collectionProp name="UserParameters.thread_values">
                            <collectionProp name="1331988531">
                              <stringProp name="-1849648931">${activeDashboardGuid}</stringProp>
                            </collectionProp>
                          </collectionProp>
                          <boolProp name="UserParameters.per_iteration">false</boolProp>
                        </UserParameters>
                        <hashTree/>
                      </hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Switch Dashboards Module" enabled="false">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                          <stringProp name="977251861">Test Fragments</stringProp>
                          <stringProp name="-182467168">Included Fragments and Components</stringProp>
                          <stringProp name="-420431824">Include Switch Dashboards Component</stringProp>
                        </collectionProp>
                        <stringProp name="TestPlan.comments">As of 7.0.0 Sprint 2, this is no longer used.</stringProp>
                      </ModuleController>
                      <hashTree/>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Prior Dashboard" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="_method" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">PUT</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">_method</stringProp>
                            </elementProp>
                            <elementProp name="guid" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">${tempActiveDashboardGuid}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">guid</stringProp>
                            </elementProp>
                            <elementProp name="isdefault" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">false</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">isdefault</stringProp>
                            </elementProp>
                            <elementProp name="bypassLayoutRearrange" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">true</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">bypassLayoutRearrange</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">owf/prefs/dashboard/${tempActiveDashboardGuid}</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.implementation">Java</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="-57127207">&quot;isGroupDashboard&quot;:</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">2</intProp>
                        </ResponseAssertion>
                        <hashTree/>
                      </hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Open Widgets Fragment" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                          <stringProp name="977251861">Test Fragments</stringProp>
                          <stringProp name="1233367769">Open Widgets</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Add Widget" enabled="true">
                  <intProp name="ThroughputController.style">1</intProp>
                  <boolProp name="ThroughputController.perThread">true</boolProp>
                  <stringProp name="ThroughputController.maxThroughput">${__javaScript(parseInt(parseInt(${loopsPerUser}) * (1/100) * parseInt(${addWidget%})))}</stringProp>
                  <stringProp name="ThroughputController.percentThroughput">${__javaScript(parseInt(vars.get(&quot;addWidget%&quot;)))}</stringProp>
                </ThroughputController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="All Transactions" enabled="true">
                    <boolProp name="TransactionController.parent">false</boolProp>
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <stringProp name="TestPlan.comments">Encompasses all transactions in order to deliver a pure average time per request and throughput.</stringProp>
                  </TransactionController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Add Widget Transaction - ${addWidget%}%" enabled="true">
                      <boolProp name="TransactionController.parent">false</boolProp>
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                    </TransactionController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Send Metric Module" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                          <stringProp name="977251861">Test Fragments</stringProp>
                          <stringProp name="-182467168">Included Fragments and Components</stringProp>
                          <stringProp name="524233325">Include Send Metric Component</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Send Widget Load Time Module" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                          <stringProp name="977251861">Test Fragments</stringProp>
                          <stringProp name="-182467168">Included Fragments and Components</stringProp>
                          <stringProp name="291492328">Include Send Widget Load Time Component</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Send Widget Load Time Module" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                          <stringProp name="977251861">Test Fragments</stringProp>
                          <stringProp name="-182467168">Included Fragments and Components</stringProp>
                          <stringProp name="291492328">Include Send Widget Load Time Component</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                      <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Add Delay for Selecting a Widget to Add From Marketplace" enabled="true">
                        <intProp name="ActionProcessor.action">1</intProp>
                        <intProp name="ActionProcessor.target">0</intProp>
                        <stringProp name="ActionProcessor.duration">0</stringProp>
                      </TestAction>
                      <hashTree>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="ConstantTimer.delay">10000</stringProp>
                          <stringProp name="RandomTimer.range">80000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                      <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Set Up Parameters for Add Marketplace Widget" enabled="true">
                        <intProp name="ActionProcessor.action">1</intProp>
                        <intProp name="ActionProcessor.target">0</intProp>
                        <stringProp name="ActionProcessor.duration">0</stringProp>
                      </TestAction>
                      <hashTree>
                        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                          <collectionProp name="UserParameters.names">
                            <stringProp name="-306875637">widget_num</stringProp>
                            <stringProp name="98712264">guid1</stringProp>
                            <stringProp name="104584966">name1</stringProp>
                            <stringProp name="1105615115">guid_child1</stringProp>
                            <stringProp name="-144879927">name_child1</stringProp>
                          </collectionProp>
                          <collectionProp name="UserParameters.thread_values">
                            <collectionProp name="191463770">
                              <stringProp name="49">1</stringProp>
                              <stringProp name="-372758776">${__RandomString(4,0123456789)}${__RandomString(4,abcdef0123456789)}-${__RandomString(4,abcdef0123456789)}-${__RandomString(4,abcdef0123456789)}-${__RandomString(4,abcdef0123456789)}-${__RandomString(12,abcdef0123456789)}</stringProp>
                              <stringProp name="-1667270077">ParentWidget1</stringProp>
                              <stringProp name="-372758776">${__RandomString(4,0123456789)}${__RandomString(4,abcdef0123456789)}-${__RandomString(4,abcdef0123456789)}-${__RandomString(4,abcdef0123456789)}-${__RandomString(4,abcdef0123456789)}-${__RandomString(12,abcdef0123456789)}</stringProp>
                              <stringProp name="-2039009839">ChildWidget1</stringProp>
                            </collectionProp>
                          </collectionProp>
                          <boolProp name="UserParameters.per_iteration">false</boolProp>
                        </UserParameters>
                        <hashTree/>
                      </hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Add Marketplace Widget Module" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                          <stringProp name="977251861">Test Fragments</stringProp>
                          <stringProp name="-182467168">Included Fragments and Components</stringProp>
                          <stringProp name="-1193209011">Include Add Marketplace Widget Component</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Create Dashboard" enabled="true">
                  <intProp name="ThroughputController.style">1</intProp>
                  <boolProp name="ThroughputController.perThread">true</boolProp>
                  <stringProp name="ThroughputController.maxThroughput">${__javaScript(parseInt(parseInt(${loopsPerUser}) * (1/100) * parseInt(${createDashboard%})))}</stringProp>
                  <stringProp name="ThroughputController.percentThroughput">${__javaScript(parseInt(vars.get(&quot;createDashboard%&quot;)))}</stringProp>
                </ThroughputController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="All Transactions" enabled="true">
                    <boolProp name="TransactionController.parent">false</boolProp>
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <stringProp name="TestPlan.comments">Encompasses all transactions in order to deliver a pure average time per request and throughput.</stringProp>
                  </TransactionController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Create Dashboard Transaction - ${createDashboard%}%" enabled="true">
                      <boolProp name="TransactionController.parent">false</boolProp>
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Dashboard Request" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="_method" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">PUT</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">_method</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">owf/prefs/dashboard/${guid}</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.implementation">Java</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="TestPlan.comments">Run twice because there are two calls to it as of version 5.0.0-ALPHA-SPRINT3 Build Date: May 4 2012 Build Number: 2712, once
when you open the Dashboard Settings window, and again after you create a new dashboard.</stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                          <collectionProp name="UserParameters.names">
                            <stringProp name="3184265">guid</stringProp>
                            <stringProp name="-698852517">dashboard_num</stringProp>
                          </collectionProp>
                          <collectionProp name="UserParameters.thread_values">
                            <collectionProp name="1112762720">
                              <stringProp name="1343063667">${__V(dashboardGuid_${__Random(1,${dashboardGuid_matchNr})})}</stringProp>
                              <stringProp name="-565891426">${__Random(0,99999999999999)}</stringProp>
                            </collectionProp>
                          </collectionProp>
                          <boolProp name="UserParameters.per_iteration">false</boolProp>
                        </UserParameters>
                        <hashTree/>
                      </hashTree>
                      <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Add Delay for Naming, Describing, and Designing Dashboard" enabled="true">
                        <intProp name="ActionProcessor.action">1</intProp>
                        <intProp name="ActionProcessor.target">0</intProp>
                        <stringProp name="ActionProcessor.duration">0</stringProp>
                      </TestAction>
                      <hashTree>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="ConstantTimer.delay">8000</stringProp>
                          <stringProp name="RandomTimer.range">30000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Create Dashboard Module" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                          <stringProp name="977251861">Test Fragments</stringProp>
                          <stringProp name="-182467168">Included Fragments and Components</stringProp>
                          <stringProp name="1423520709">Include Create Dashboard Component</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Launch Menu" enabled="true">
                  <intProp name="ThroughputController.style">1</intProp>
                  <boolProp name="ThroughputController.perThread">true</boolProp>
                  <stringProp name="ThroughputController.maxThroughput">${__javaScript(parseInt(parseInt(${loopsPerUser}) * (1/100) * parseInt(${launchMenu%})))}</stringProp>
                  <stringProp name="ThroughputController.percentThroughput">${__javaScript(parseInt(vars.get(&quot;launchMenu%&quot;)))}</stringProp>
                </ThroughputController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="All Transactions" enabled="true">
                    <boolProp name="TransactionController.parent">false</boolProp>
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <stringProp name="TestPlan.comments">Encompasses all transactions in order to deliver a pure average time per request and throughput.</stringProp>
                  </TransactionController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Launch Menu Transaction - ${launchMenu%}%" enabled="true">
                      <boolProp name="TransactionController.parent">false</boolProp>
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                    </TransactionController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include List Widgets Module" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                          <stringProp name="977251861">Test Fragments</stringProp>
                          <stringProp name="-182467168">Included Fragments and Components</stringProp>
                          <stringProp name="1758189634">Include List Widgets Component</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                      <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Add Delay for Browsing Launch Menu" enabled="true">
                        <intProp name="ActionProcessor.action">1</intProp>
                        <intProp name="ActionProcessor.target">0</intProp>
                        <stringProp name="ActionProcessor.duration">0</stringProp>
                      </TestAction>
                      <hashTree>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="ConstantTimer.delay">3000</stringProp>
                          <stringProp name="RandomTimer.range">20000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                      <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Set Up Parameters for Widget Preferences Save" enabled="true">
                        <intProp name="ActionProcessor.action">1</intProp>
                        <intProp name="ActionProcessor.target">0</intProp>
                        <stringProp name="ActionProcessor.duration">0</stringProp>
                      </TestAction>
                      <hashTree>
                        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                          <collectionProp name="UserParameters.names">
                            <stringProp name="-827553833">randomTag</stringProp>
                          </collectionProp>
                          <collectionProp name="UserParameters.thread_values">
                            <collectionProp name="-28989564">
                              <stringProp name="117642219">${__RandomString(${__Random(1,5)},1234567890abcdefghijklmnopqrstuvwxyz)}</stringProp>
                            </collectionProp>
                          </collectionProp>
                          <boolProp name="UserParameters.per_iteration">false</boolProp>
                        </UserParameters>
                        <hashTree/>
                        <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor To Update All Widgets" enabled="false">
                          <stringProp name="scriptLanguage">javascript</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">var widgetsToUpdate = vars.get(&apos;widgetsToUpdate&apos;);
var counter = vars.get(&apos;counter&apos;);

if(counter == 1) {
    widgetsToUpdate = &apos;[&apos;;
} else {
    widgetsToUpdate += &apos;,&apos;;
}

//Get a random boolean
function getRandomBoolean() {
    if(Math.round(Math.random()) === 0) {
        return false;
    } else {
        return true;
    }
}

var widgetGuid = vars.get(&apos;widgetGuid_&apos; + counter);

//Random whether it gets a tag or not
if(getRandomBoolean()) {
    widgetsToUpdate += &apos;{&quot;guid&quot;:&quot;&apos; + widgetGuid + &apos;&quot;, &quot;visible&quot;:&apos; + getRandomBoolean().toString() + &apos;,&quot;tags&quot;:[{&quot;name&quot;:&quot;&apos; + vars.get(&apos;randomTag&apos;) + &apos;&quot;,&quot;visible&quot;:true,&quot;position&quot;:-1,&quot;editable&quot;:true}]}&apos;;
} else {
    widgetsToUpdate += &apos;{&quot;guid&quot;:&quot;&apos; + widgetGuid + &apos;&quot;, &quot;visible&quot;:&apos; + getRandomBoolean() + &apos;,&quot;tags&quot;:[]}&apos;;
}

//Last widget guid, close the string
if(counter == vars.get(&apos;widgetGuid_matchNr&apos;)) {
    widgetsToUpdate += &apos;]&apos;;
}

vars.put(&apos;widgetsToUpdate&apos;, widgetsToUpdate);</stringProp>
                        </BSFPreProcessor>
                        <hashTree/>
                        <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor To Update One Widget" enabled="true">
                          <stringProp name="scriptLanguage">javascript</stringProp>
                          <stringProp name="parameters"></stringProp>
                          <stringProp name="filename"></stringProp>
                          <stringProp name="script">var widgetsToUpdate = vars.get(&apos;widgetsToUpdate&apos;);

widgetsToUpdate = &apos;[&apos;;

//Get a random boolean
function getRandomBoolean() {
    if(Math.round(Math.random()) === 0) {
        return false;
    } else {
        return true;
    }
}

//Select a random widget guid
var widgetGuid = vars.get(&apos;widgetGuid_&apos; + Math.floor(Math.random()*parseInt(vars.get(&apos;widgetGuid_matchNr&apos;)) + 1));

//Random whether it gets a tag or not
if(getRandomBoolean()) {
    widgetsToUpdate += &apos;{&quot;guid&quot;:&quot;&apos; + widgetGuid + &apos;&quot;, &quot;visible&quot;:&apos; + getRandomBoolean().toString() + &apos;,&quot;tags&quot;:[{&quot;name&quot;:&quot;&apos; + vars.get(&apos;randomTag&apos;) + &apos;&quot;,&quot;visible&quot;:true,&quot;position&quot;:-1,&quot;editable&quot;:true}]}&apos;;
} else {
    widgetsToUpdate += &apos;{&quot;guid&quot;:&quot;&apos; + widgetGuid + &apos;&quot;, &quot;visible&quot;:&apos; + getRandomBoolean() + &apos;,&quot;tags&quot;:[]}&apos;;
}

widgetsToUpdate += &apos;]&apos;;

vars.put(&apos;widgetsToUpdate&apos;, widgetsToUpdate);</stringProp>
                        </BSFPreProcessor>
                        <hashTree/>
                      </hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Update Widget Preferences Module" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                          <stringProp name="977251861">Test Fragments</stringProp>
                          <stringProp name="-182467168">Included Fragments and Components</stringProp>
                          <stringProp name="-1363958504">Include Update Widget Preferences Component</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Edit Dashboard" enabled="true">
                  <intProp name="ThroughputController.style">1</intProp>
                  <boolProp name="ThroughputController.perThread">true</boolProp>
                  <stringProp name="ThroughputController.maxThroughput">${__javaScript(parseInt(parseInt(${loopsPerUser}) * (1/100) * parseInt(${editDashboard%})))}</stringProp>
                  <stringProp name="ThroughputController.percentThroughput">${__javaScript(parseInt(vars.get(&quot;editDashboard%&quot;)))}</stringProp>
                </ThroughputController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="All Transactions" enabled="true">
                    <boolProp name="TransactionController.parent">false</boolProp>
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <stringProp name="TestPlan.comments">Encompasses all transactions in order to deliver a pure average time per request and throughput.</stringProp>
                  </TransactionController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Edit Dashboard Transaction - ${editDashboard%}%" enabled="true">
                      <boolProp name="TransactionController.parent">false</boolProp>
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Dashboard Request" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="_method" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">PUT</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">_method</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">owf/prefs/dashboard/${guid}</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.implementation">Java</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                          <collectionProp name="UserParameters.names">
                            <stringProp name="3184265">guid</stringProp>
                          </collectionProp>
                          <collectionProp name="UserParameters.thread_values">
                            <collectionProp name="772835538">
                              <stringProp name="1343063667">${__V(dashboardGuid_${__Random(1,${dashboardGuid_matchNr})})}</stringProp>
                            </collectionProp>
                          </collectionProp>
                          <boolProp name="UserParameters.per_iteration">false</boolProp>
                        </UserParameters>
                        <hashTree/>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="-57127207">&quot;isGroupDashboard&quot;:</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">2</intProp>
                        </ResponseAssertion>
                        <hashTree/>
                      </hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Dashboard Request" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="_method" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">PUT</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">_method</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">owf/prefs/dashboard/${guid}</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.implementation">Java</stringProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="TestPlan.comments">As of 7.0.0 Sprint 2, this is called 2 times during the editing process.</stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                          <collectionProp name="UserParameters.names">
                            <stringProp name="3184265">guid</stringProp>
                          </collectionProp>
                          <collectionProp name="UserParameters.thread_values">
                            <collectionProp name="772835538">
                              <stringProp name="1343063667">${__V(dashboardGuid_${__Random(1,${dashboardGuid_matchNr})})}</stringProp>
                            </collectionProp>
                          </collectionProp>
                          <boolProp name="UserParameters.per_iteration">false</boolProp>
                        </UserParameters>
                        <hashTree/>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="-57127207">&quot;isGroupDashboard&quot;:</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">2</intProp>
                        </ResponseAssertion>
                        <hashTree/>
                      </hashTree>
                      <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Add Delay for Editing the Dashboard" enabled="true">
                        <intProp name="ActionProcessor.action">1</intProp>
                        <intProp name="ActionProcessor.target">0</intProp>
                        <stringProp name="ActionProcessor.duration">0</stringProp>
                      </TestAction>
                      <hashTree>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="ConstantTimer.delay">30000</stringProp>
                          <stringProp name="RandomTimer.range">5000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Update Dashboard Module" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                          <stringProp name="977251861">Test Fragments</stringProp>
                          <stringProp name="-182467168">Included Fragments and Components</stringProp>
                          <stringProp name="1908335378">Include Update Dashboard Component</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Load Requests Module" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                          <stringProp name="977251861">Test Fragments</stringProp>
                          <stringProp name="1899770302">Load Requests</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Open Help" enabled="true">
                  <intProp name="ThroughputController.style">1</intProp>
                  <boolProp name="ThroughputController.perThread">true</boolProp>
                  <stringProp name="ThroughputController.maxThroughput">${__javaScript(parseInt(parseInt(${loopsPerUser}) * (1/100) * parseInt(${openHelp%})))}</stringProp>
                  <stringProp name="ThroughputController.percentThroughput">${__javaScript(parseInt(vars.get(&quot;openHelp%&quot;)))}</stringProp>
                </ThroughputController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="All Transactions" enabled="true">
                    <boolProp name="TransactionController.parent">false</boolProp>
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <stringProp name="TestPlan.comments">Encompasses all transactions in order to deliver a pure average time per request and throughput.</stringProp>
                  </TransactionController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Open Help Transaction - ${openHelp%}%" enabled="true">
                      <boolProp name="TransactionController.parent">false</boolProp>
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                    </TransactionController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Help Request" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="_dc" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">1336591660432</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">_dc</stringProp>
                            </elementProp>
                            <elementProp name="node" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">false</boolProp>
                              <stringProp name="Argument.value">root</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">node</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain"></stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                        <stringProp name="HTTPSampler.protocol"></stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">owf/helpFiles</stringProp>
                        <stringProp name="HTTPSampler.method">GET</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                          <collectionProp name="Asserion.test_strings">
                            <stringProp name="-766668569">&quot;text&quot;:</stringProp>
                            <stringProp name="-885009953">&quot;path&quot;:</stringProp>
                          </collectionProp>
                          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                          <boolProp name="Assertion.assume_success">false</boolProp>
                          <intProp name="Assertion.test_type">2</intProp>
                        </ResponseAssertion>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Edit Widgets" enabled="true">
                  <intProp name="ThroughputController.style">1</intProp>
                  <boolProp name="ThroughputController.perThread">true</boolProp>
                  <stringProp name="ThroughputController.maxThroughput">${__javaScript(parseInt(parseInt(${loopsPerUser}) * (1/100) * parseInt(${editWidgets%})))}</stringProp>
                  <stringProp name="ThroughputController.percentThroughput">${__javaScript(parseInt(vars.get(&quot;editWidgets%&quot;)))}</stringProp>
                </ThroughputController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="All Transactions" enabled="true">
                    <boolProp name="TransactionController.parent">false</boolProp>
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <stringProp name="TestPlan.comments">Encompasses all transactions in order to deliver a pure average time per request and throughput.</stringProp>
                  </TransactionController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Edit Widgets Transaction - ${editWidgets%}%" enabled="true">
                      <boolProp name="TransactionController.parent">false</boolProp>
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                    </TransactionController>
                    <hashTree>
                      <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Set Up widgetsToUpdate Parameter" enabled="true">
                        <boolProp name="LoopController.continue_forever">true</boolProp>
                        <stringProp name="LoopController.loops">${widgetGuid_matchNr}</stringProp>
                      </LoopController>
                      <hashTree>
                        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                          <stringProp name="CounterConfig.start">1</stringProp>
                          <stringProp name="CounterConfig.end"></stringProp>
                          <stringProp name="CounterConfig.incr">1</stringProp>
                          <stringProp name="CounterConfig.name">counter</stringProp>
                          <stringProp name="CounterConfig.format"></stringProp>
                          <boolProp name="CounterConfig.per_user">true</boolProp>
                          <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                        </CounterConfig>
                        <hashTree/>
                        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Set Up Parameters for Edit Widgets" enabled="true">
                          <intProp name="ActionProcessor.action">1</intProp>
                          <intProp name="ActionProcessor.target">0</intProp>
                          <stringProp name="ActionProcessor.duration">0</stringProp>
                        </TestAction>
                        <hashTree>
                          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                            <collectionProp name="UserParameters.names">
                              <stringProp name="-827553833">randomTag</stringProp>
                            </collectionProp>
                            <collectionProp name="UserParameters.thread_values">
                              <collectionProp name="-28989564">
                                <stringProp name="117642219">${__RandomString(${__Random(1,5)},1234567890abcdefghijklmnopqrstuvwxyz)}</stringProp>
                              </collectionProp>
                            </collectionProp>
                            <boolProp name="UserParameters.per_iteration">false</boolProp>
                          </UserParameters>
                          <hashTree/>
                          <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor To Update All Widgets" enabled="false">
                            <stringProp name="scriptLanguage">javascript</stringProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="script">var widgetsToUpdate = vars.get(&apos;widgetsToUpdate&apos;);
var counter = vars.get(&apos;counter&apos;);

if(counter == 1) {
    widgetsToUpdate = &apos;[&apos;;
} else {
    widgetsToUpdate += &apos;,&apos;;
}

//Get a random boolean
function getRandomBoolean() {
    if(Math.round(Math.random()) === 0) {
        return false;
    } else {
        return true;
    }
}

var widgetGuid = vars.get(&apos;widgetGuid_&apos; + counter);

//Random whether it gets a tag or not
if(getRandomBoolean()) {
    widgetsToUpdate += &apos;{&quot;guid&quot;:&quot;&apos; + widgetGuid + &apos;&quot;, &quot;visible&quot;:&apos; + getRandomBoolean().toString() + &apos;,&quot;tags&quot;:[{&quot;name&quot;:&quot;&apos; + vars.get(&apos;randomTag&apos;) + &apos;&quot;,&quot;visible&quot;:true,&quot;position&quot;:-1,&quot;editable&quot;:true}]}&apos;;
} else {
    widgetsToUpdate += &apos;{&quot;guid&quot;:&quot;&apos; + widgetGuid + &apos;&quot;, &quot;visible&quot;:&apos; + getRandomBoolean() + &apos;,&quot;tags&quot;:[]}&apos;;
}

//Last widget guid, close the string
if(counter == vars.get(&apos;widgetGuid_matchNr&apos;)) {
    widgetsToUpdate += &apos;]&apos;;
}

vars.put(&apos;widgetsToUpdate&apos;, widgetsToUpdate);</stringProp>
                          </BSFPreProcessor>
                          <hashTree/>
                          <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor To Update One Widget" enabled="true">
                            <stringProp name="scriptLanguage">javascript</stringProp>
                            <stringProp name="parameters"></stringProp>
                            <stringProp name="filename"></stringProp>
                            <stringProp name="script">var widgetsToUpdate = vars.get(&apos;widgetsToUpdate&apos;);

widgetsToUpdate = &apos;[&apos;;

//Get a random boolean
function getRandomBoolean() {
    if(Math.round(Math.random()) === 0) {
        return false;
    } else {
        return true;
    }
}

//Select a random widget guid
var widgetGuid = vars.get(&apos;widgetGuid_&apos; + Math.floor(Math.random()*parseInt(vars.get(&apos;widgetGuid_matchNr&apos;)) + 1));

//Random whether it gets a tag or not
if(getRandomBoolean()) {
    widgetsToUpdate += &apos;{&quot;guid&quot;:&quot;&apos; + widgetGuid + &apos;&quot;, &quot;visible&quot;:&apos; + getRandomBoolean().toString() + &apos;,&quot;tags&quot;:[{&quot;name&quot;:&quot;&apos; + vars.get(&apos;randomTag&apos;) + &apos;&quot;,&quot;visible&quot;:true,&quot;position&quot;:-1,&quot;editable&quot;:true}]}&apos;;
} else {
    widgetsToUpdate += &apos;{&quot;guid&quot;:&quot;&apos; + widgetGuid + &apos;&quot;, &quot;visible&quot;:&apos; + getRandomBoolean() + &apos;,&quot;tags&quot;:[]}&apos;;
}

widgetsToUpdate += &apos;]&apos;;

vars.put(&apos;widgetsToUpdate&apos;, widgetsToUpdate);</stringProp>
                          </BSFPreProcessor>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Update Widget Preferences Module" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                          <stringProp name="977251861">Test Fragments</stringProp>
                          <stringProp name="-182467168">Included Fragments and Components</stringProp>
                          <stringProp name="-1363958504">Include Update Widget Preferences Component</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include List Widgets Module" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                          <stringProp name="977251861">Test Fragments</stringProp>
                          <stringProp name="-182467168">Included Fragments and Components</stringProp>
                          <stringProp name="1758189634">Include List Widgets Component</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Change Theme" enabled="true">
                  <intProp name="ThroughputController.style">1</intProp>
                  <boolProp name="ThroughputController.perThread">true</boolProp>
                  <stringProp name="ThroughputController.maxThroughput">${__javaScript(parseInt(parseInt(${loopsPerUser}) * (1/100) * parseInt(${changeTheme%})))}</stringProp>
                  <stringProp name="ThroughputController.percentThroughput">${__javaScript(parseInt(vars.get(&quot;changeTheme%&quot;)))}</stringProp>
                </ThroughputController>
                <hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="All Transactions" enabled="true">
                    <boolProp name="TransactionController.parent">false</boolProp>
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                    <stringProp name="TestPlan.comments">Encompasses all transactions in order to deliver a pure average time per request and throughput.</stringProp>
                  </TransactionController>
                  <hashTree>
                    <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Change Theme Transaction - ${changeTheme%}%" enabled="true">
                      <boolProp name="TransactionController.parent">false</boolProp>
                      <boolProp name="TransactionController.includeTimers">false</boolProp>
                    </TransactionController>
                    <hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Get Themes Module" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                          <stringProp name="977251861">Test Fragments</stringProp>
                          <stringProp name="-182467168">Included Fragments and Components</stringProp>
                          <stringProp name="-409937815">Include Get Themes Component</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                      <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="Select Random Theme" enabled="true">
                        <intProp name="InterleaveControl.style">1</intProp>
                      </RandomController>
                      <hashTree>
                        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Default Theme" enabled="true">
                          <intProp name="ActionProcessor.action">1</intProp>
                          <intProp name="ActionProcessor.target">0</intProp>
                          <stringProp name="ActionProcessor.duration">0</stringProp>
                        </TestAction>
                        <hashTree>
                          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                            <collectionProp name="UserParameters.names">
                              <stringProp name="1446050798">selectedTheme</stringProp>
                            </collectionProp>
                            <collectionProp name="UserParameters.thread_values">
                              <collectionProp name="-1569491023">
                                <stringProp name="378637411">a_default</stringProp>
                              </collectionProp>
                            </collectionProp>
                            <boolProp name="UserParameters.per_iteration">false</boolProp>
                          </UserParameters>
                          <hashTree/>
                        </hashTree>
                        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="White on Black Theme" enabled="true">
                          <intProp name="ActionProcessor.action">1</intProp>
                          <intProp name="ActionProcessor.target">0</intProp>
                          <stringProp name="ActionProcessor.duration">0</stringProp>
                        </TestAction>
                        <hashTree>
                          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                            <collectionProp name="UserParameters.names">
                              <stringProp name="1446050798">selectedTheme</stringProp>
                            </collectionProp>
                            <collectionProp name="UserParameters.thread_values">
                              <collectionProp name="147374326">
                                <stringProp name="-102454389">accessibility-wob</stringProp>
                              </collectionProp>
                            </collectionProp>
                            <boolProp name="UserParameters.per_iteration">false</boolProp>
                          </UserParameters>
                          <hashTree/>
                        </hashTree>
                        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Black on White Theme" enabled="true">
                          <intProp name="ActionProcessor.action">1</intProp>
                          <intProp name="ActionProcessor.target">0</intProp>
                          <stringProp name="ActionProcessor.duration">0</stringProp>
                        </TestAction>
                        <hashTree>
                          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                            <collectionProp name="UserParameters.names">
                              <stringProp name="1446050798">selectedTheme</stringProp>
                            </collectionProp>
                            <collectionProp name="UserParameters.thread_values">
                              <collectionProp name="215761246">
                                <stringProp name="-102474549">accessibility-bow</stringProp>
                              </collectionProp>
                            </collectionProp>
                            <boolProp name="UserParameters.per_iteration">false</boolProp>
                          </UserParameters>
                          <hashTree/>
                        </hashTree>
                        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Large Text Theme" enabled="true">
                          <intProp name="ActionProcessor.action">1</intProp>
                          <intProp name="ActionProcessor.target">0</intProp>
                          <stringProp name="ActionProcessor.duration">0</stringProp>
                        </TestAction>
                        <hashTree>
                          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                            <collectionProp name="UserParameters.names">
                              <stringProp name="1446050798">selectedTheme</stringProp>
                            </collectionProp>
                            <collectionProp name="UserParameters.thread_values">
                              <collectionProp name="-1520160070">
                                <stringProp name="1994094719">large-text</stringProp>
                              </collectionProp>
                            </collectionProp>
                            <boolProp name="UserParameters.per_iteration">false</boolProp>
                          </UserParameters>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                      <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Add Delay for Selecting Theme" enabled="true">
                        <intProp name="ActionProcessor.action">1</intProp>
                        <intProp name="ActionProcessor.target">0</intProp>
                        <stringProp name="ActionProcessor.duration">0</stringProp>
                      </TestAction>
                      <hashTree>
                        <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                          <stringProp name="ConstantTimer.delay">15000</stringProp>
                          <stringProp name="RandomTimer.range">1000</stringProp>
                        </UniformRandomTimer>
                        <hashTree/>
                      </hashTree>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Select Theme Module" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                          <stringProp name="977251861">Test Fragments</stringProp>
                          <stringProp name="-182467168">Included Fragments and Components</stringProp>
                          <stringProp name="-1371181382">Include Select Theme Component</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Exit Requests Module" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                          <stringProp name="977251861">Test Fragments</stringProp>
                          <stringProp name="480410758">Exit Requests</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                      <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Load Requests Module" enabled="true">
                        <collectionProp name="ModuleController.node_path">
                          <stringProp name="-1227702913">WorkBench</stringProp>
                          <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                          <stringProp name="977251861">Test Fragments</stringProp>
                          <stringProp name="1899770302">Load Requests</stringProp>
                        </collectionProp>
                      </ModuleController>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="All Transactions" enabled="true">
              <boolProp name="TransactionController.parent">false</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <stringProp name="TestPlan.comments">Encompasses all transactions in order to deliver a pure average time per request and throughput.</stringProp>
            </TransactionController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Logout Transaction" enabled="true">
                <boolProp name="TransactionController.parent">false</boolProp>
                <boolProp name="TransactionController.includeTimers">false</boolProp>
              </TransactionController>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Exit Requests Fragment" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                    <stringProp name="977251861">Test Fragments</stringProp>
                    <stringProp name="480410758">Exit Requests</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Logout Module" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                    <stringProp name="977251861">Test Fragments</stringProp>
                    <stringProp name="-182467168">Included Fragments and Components</stringProp>
                    <stringProp name="721943694">Include Logout Fragment</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragments" enabled="false">
        <stringProp name="TestPlan.comments">Must be disabled to avoid a NonGUIDriver exception when running from the command line.</stringProp>
      </TestFragmentController>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Login" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTPS-Certificate Login Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/owf</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Generate Username" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-266666762">userName</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1930929469">
                  <stringProp name="572576925">${userType}${userRole}${userNum}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
              <stringProp name="TestPlan.comments">This will log in as a new testAdminX or testUserX (depending on which the userRole parameter is set to), starting at 1 and incrementing each time.</stringProp>
            </UserParameters>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-UserDN</stringProp>
                  <stringProp name="Header.value">${userName}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1277579303">Ozone Widget Framework</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Scope.variable">loginSuccess</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="Assert Login Success" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">// Flag to identify that the log in failed so the If Login Failed controller can stop all tests
var loginFailed = false;

if(prev.getErrorCount() &gt; 0) {
    loginFailed = true;
}

// Set loginFailed JMeter variable
vars.put(&quot;loginFailed&quot;, loginFailed);

if(loginFailed) {
    AssertionResult.setFailureMessage(vars.get(&quot;userName&quot;) + &quot; failed to log in. Stopping thread due to log in error.&quot;);
    AssertionResult.setFailure(true);
} else {
    AssertionResult.setFailure(false);
}</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="TestPlan.comments">Sets the loginFailed flag variable for if there were errors in the CAS Login sample.

If loginFailed is true, this will throw and error and warn the user the thread will be stopped and recommend that they check their Ramp-Up Period 
to ensure the users have enough time to log in.</stringProp>
            </BSFAssertion>
            <hashTree/>
            <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="If Login Failed Stop Thread" enabled="true">
              <intProp name="OnError.action">0</intProp>
            </ResultAction>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Dashboard Guids Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">dashboardGuid</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;guid&quot;: \&quot;([^&quot;]+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Scope.variable">AAAAAAA</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Active Dashboard Guid Extractor" enabled="true">
              <stringProp name="TestPlan.comments">Choose a random dashboard to be the active dashboard.</stringProp>
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">activeDashboardGuid</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;guid&quot;: \&quot;([^&quot;]+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
              <stringProp name="Scope.variable">AAAAAAA</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Sequential Login Script" enabled="true">
          <stringProp name="TestPlan.comments">Cannot just include the login.jmx fragment because not all of the numUsers are logging in now, so the Synchronizing Timer in
the login fragment would just hang forever and there is no clear way to temporarily change the numUsers variable.</stringProp>
        </OnceOnlyController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User 0 to ${firstMax}" enabled="true">
            <stringProp name="IfController.condition">${__threadNum()} &lt;= ${firstMax}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Setup Login Module" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                <stringProp name="977251861">Test Fragments</stringProp>
                <stringProp name="73596745">Login</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="First Thread Group Delay Timer" enabled="true">
              <stringProp name="TestPlan.comments">The formula for the Thread Delay is as follows:
threadDelay = [threadNumber] * [firstGroupDelay]</stringProp>
              <stringProp name="ConstantTimer.delay">${__jexl2(${__threadNum()} * ${firstDelay})}</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User &gt; ${firstMax} &amp;&amp; &lt; ${secondMax}" enabled="true">
            <stringProp name="IfController.condition">${__threadNum()} &gt; ${firstMax} &amp;&amp; ${__threadNum()}  &lt;= ${secondMax}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Setup Login Module" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                <stringProp name="977251861">Test Fragments</stringProp>
                <stringProp name="73596745">Login</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Second Thread Group Delay Timer" enabled="true">
              <stringProp name="TestPlan.comments">The formula for the Thread Delay is as follows:
threadDelay = [threadNumber] * [secondGroupDelay] - [firstGroupMaxThread] * [secondGroupDelay] + [firstGroupMaxThread] * [firstGroupDelay]</stringProp>
              <stringProp name="ConstantTimer.delay">${__jexl2(${__threadNum()} * ${secondDelay} - ${firstMax} * ${secondDelay} + ${firstMax} * ${firstDelay})}</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User &gt; ${secondMax} &amp;&amp; &lt; ${thirdMax}" enabled="true">
            <stringProp name="IfController.condition">${__threadNum()} &gt; ${secondMax} &amp;&amp; ${__threadNum()}  &lt;= ${thirdMax}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Setup Login Module" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                <stringProp name="977251861">Test Fragments</stringProp>
                <stringProp name="73596745">Login</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Third Thread Group Delay Timer" enabled="true">
              <stringProp name="TestPlan.comments">The formula for the Thread Delay is as follows:
threadDelay = [threadNumber] * [thirdGroupDelay] - [firstGroupMaxThread] * [secondGroupDelay] + [firstGroupMaxThread] * [firstGroupDelay]
	- [secondGroupMaxThread] * [thirdGroupDelay] + [secondGroupMaxThread] * [secondGroupDelay]</stringProp>
              <stringProp name="ConstantTimer.delay">${__jexl2(${__threadNum()} * ${thirdDelay} - ${firstMax} * ${secondDelay} + ${firstMax} * ${firstDelay} - ${secondMax} * ${thirdDelay} + ${secondMax} * ${secondDelay})}</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If User &gt; ${thirdMax}" enabled="true">
            <stringProp name="IfController.condition">${__threadNum()} &gt; ${thirdMax}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Setup Login Module" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                <stringProp name="977251861">Test Fragments</stringProp>
                <stringProp name="73596745">Login</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Fourth Thread Group Delay Timer" enabled="true">
              <stringProp name="TestPlan.comments">The formula for the Thread Delay is as follows:
threadDelay = [threadNumber] * [fourthGroupDelay] - [firstGroupMaxThread] * [secondGroupDelay] + [firstGroupMaxThread] * [firstGroupDelay]
	- [secondGroupMaxThread] * [thirdGroupDelay] + [secondGroupMaxThread] * [secondGroupDelay] - [thirdGroupMaxThread]
	* [fourthGroupDelay] + [thirdGroupMaxThread] * [thirdGroupDelay]</stringProp>
              <stringProp name="ConstantTimer.delay">${__jexl2(${__threadNum()} * ${fourthDelay} - ${firstMax} * ${secondDelay} + ${firstMax} * ${firstDelay} - ${secondMax} * ${thirdDelay} + ${secondMax} * ${secondDelay} - ${thirdMax} * ${fourthDelay} + ${thirdMax} * ${thirdDelay})}</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Load Requests" enabled="true">
          <stringProp name="TestPlan.comments">These are the requests made to the server when OWF is loaded.</stringProp>
        </GenericController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SessionServlet Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="key" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">showAccessAlert</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">key</stringProp>
                </elementProp>
                <elementProp name="value" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">value</stringProp>
                </elementProp>
                <elementProp name="dojo.preventCache" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__Random(1000000000000,9999999999999)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">dojo.preventCache</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">owf/servlet/SessionServlet</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Get Configuration Module" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
              <stringProp name="977251861">Test Fragments</stringProp>
              <stringProp name="-182467168">Included Fragments and Components</stringProp>
              <stringProp name="1396717524">Include Get Configuration</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Get Dashboards Module" enabled="false">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
              <stringProp name="977251861">Test Fragments</stringProp>
              <stringProp name="-182467168">Included Fragments and Components</stringProp>
              <stringProp name="465044926">Include Get Dashboards Component</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">As of Nish&apos;s change to include the user&apos;s dashboards in the config.js loaded, this call is no longer used.</stringProp>
          </ModuleController>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include List Widgets Module" enabled="false">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
              <stringProp name="977251861">Test Fragments</stringProp>
              <stringProp name="-182467168">Included Fragments and Components</stringProp>
              <stringProp name="1758189634">Include List Widgets Component</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">As of Nish&apos;s change to include the user&apos;s widgets in the config.js loaded, this call is no longer used.</stringProp>
          </ModuleController>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Send Banner State Module" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
              <stringProp name="977251861">Test Fragments</stringProp>
              <stringProp name="-182467168">Included Fragments and Components</stringProp>
              <stringProp name="95716989">Include Send Banner State</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Open Widgets Fragment" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
              <stringProp name="977251861">Test Fragments</stringProp>
              <stringProp name="1233367769">Open Widgets</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Open Widgets" enabled="true">
          <stringProp name="TestPlan.comments">This request uses the activeWidgetsCount to send the appropriate number of metric and widgetLoadTime requests.</stringProp>
        </GenericController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Generate Random Widget Count" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
            <stringProp name="TestPlan.comments">Generates a random widget count to send metric and widgetLoadTime requests for.</stringProp>
          </TestAction>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="1940636102">activeWidgetsCount</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="942176438">
                  <stringProp name="-732308131">${__Random(0,3)}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Open Active Widgets" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${activeWidgetsCount}</stringProp>
          </LoopController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Send Metric Module" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                <stringProp name="977251861">Test Fragments</stringProp>
                <stringProp name="-182467168">Included Fragments and Components</stringProp>
                <stringProp name="524233325">Include Send Metric Component</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Include Send Widget Load Time Module" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1872384936">Scenario 1 Test Plan</stringProp>
                <stringProp name="977251861">Test Fragments</stringProp>
                <stringProp name="-182467168">Included Fragments and Components</stringProp>
                <stringProp name="291492328">Include Send Widget Load Time Component</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Exit Requests" enabled="true">
          <stringProp name="TestPlan.comments">These are the requests made to the server immediately prior to exiting OWF.</stringProp>
        </GenericController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Widget Names Delete Request" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_method" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">DELETE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_method</stringProp>
                </elementProp>
                <elementProp name="dojo.preventCache" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__Random(1000000000000,9999999999999)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">dojo.preventCache</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">owf/prefs/preference/owf.custom.widgetprefs/widgetNames</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Dashboard" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_method" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">PUT</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_method</stringProp>
                </elementProp>
                <elementProp name="guid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${activeDashboardGuid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">guid</stringProp>
                </elementProp>
                <elementProp name="isdefault" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isdefault</stringProp>
                </elementProp>
                <elementProp name="bypassLayoutRearrange" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">bypassLayoutRearrange</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">owf/prefs/dashboard/${activeDashboardGuid}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-57127207">&quot;isGroupDashboard&quot;:</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Included Fragments and Components" enabled="true">
          <stringProp name="TestPlan.comments">These are all the fragments and components that are used in the scenario test, allowing their path to be easily changed if needed.</stringProp>
        </GenericController>
        <hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Get Configuration" enabled="true">
            <stringProp name="IncludeController.includepath">components/user/get_configuration.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Send Banner State" enabled="true">
            <stringProp name="IncludeController.includepath">components/user/send_banner_state.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include List Widgets Component" enabled="true">
            <stringProp name="IncludeController.includepath">components/user/list_widgets.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include List Widgets For Launch Menu Component" enabled="true">
            <stringProp name="IncludeController.includepath">components/user/list_widgets_launch_menu.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Send Metric Component" enabled="true">
            <stringProp name="IncludeController.includepath">components/user/send_metric.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Send Widget Load Time Component" enabled="true">
            <stringProp name="IncludeController.includepath">components/user/send_widget_load_time.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Switch Dashboards Component" enabled="true">
            <stringProp name="IncludeController.includepath">components/user/switch_dashboards.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Add Marketplace Widget Component" enabled="true">
            <stringProp name="IncludeController.includepath">components/user/add_marketplace_widget.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Update Dashboard Component" enabled="true">
            <stringProp name="IncludeController.includepath">components/user/update_dashboard.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Get Dashboards Component" enabled="true">
            <stringProp name="IncludeController.includepath">components/user/get_dashboards.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Create Dashboard Component" enabled="true">
            <stringProp name="IncludeController.includepath">components/user/create_dashboard.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Get Themes Component" enabled="true">
            <stringProp name="TestPlan.comments">Run twice because there are two calls to it as of version 5.0.0-ALPHA-SPRINT3 Build Date: May 4 2012 Build Number: 2712.

The first doesn&apos;t have a forward slash, the second does.</stringProp>
            <stringProp name="IncludeController.includepath">components/user/get_themes.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Select Theme Component" enabled="true">
            <stringProp name="IncludeController.includepath">components/user/select_theme.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Update Widget Preferences Component" enabled="true">
            <stringProp name="IncludeController.includepath">components/user/update_widget_preferences.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Logout Fragment" enabled="true">
            <stringProp name="TestPlan.comments">Includes fragments/logout.jmx, which handles the logout of each user.</stringProp>
            <stringProp name="IncludeController.includepath">fragments/logout.jmx</stringProp>
          </IncludeController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>false</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>false</code>
            <message>false</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
